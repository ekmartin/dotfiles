" Map leader to ,
let mapleader = ","
let g:mapleader = ","

syntax on

" Show line numbers
set number

" Make backspace work normally
set backspace=2

" Set tabs to 4 spaces
set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab

" Fix indenting
filetype indent on
set autoindent

" Better search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Vundle
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'bling/vim-airline'
Plugin 'majutsushi/tagbar'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'moll/vim-node'
Plugin 'wting/rust.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'wavded/vim-stylus'
Plugin 'digitaltoad/vim-jade'
Plugin 'godlygeek/tabular'
Plugin 'taglist.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'airblade/vim-gitgutter'
Plugin 'fatih/vim-go'
Plugin 'mxw/vim-jsx'
Plugin 'marijnh/tern_for_vim'
Plugin 'chriskempson/base16-vim'
Plugin 'elixir-lang/vim-elixir'
Plugin 'lervag/vimtex'
Plugin 'armasm'

call vundle#end()            " required
filetype plugin indent on    " required

colorscheme base16-eighties
set t_Co=256
let base16colorspace=256

set background=dark

" For Airline
set laststatus=2
let g:airline#extensions#tabline#enabled = 1

" Keybindings
nmap <leader>m :LivedownPreview<CR>
map <C-n> :NERDTreeToggle<CR>
map <F8> :TagbarToggle<CR>
map <D-p> :CtrlP<CR>

" Move in screen lines
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
noremap  <buffer> <silent> 0 g0
noremap  <buffer> <silent> $ g$

" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP

" Enable jsx in non .jsx-files
let g:jsx_ext_required = 0

set timeoutlen=350

" Show buffers in airline
let g:airline#extensions#tabline#enabled = 1

" Remove whitespace highlight from vim-go
let g:go_highlight_trailing_whitespace_error = 0

" UltiSnips-bindings
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = ["snips"]

" Remove search highlight
nnoremap <leader><space> :nohlsearch<CR>

if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Synastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_check_on_open = 1

function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
autocmd FileType c,java,javascript,python,go,elixir autocmd BufWritePre * call TrimWhiteSpace()
nnoremap <silent> <leader>ts :call TrimWhiteSpace()<CR>

function! TextFormat()
    set linebreak
    set wrap
    set textwidth=80
endfunction
command! Text call TextFormat()

" Close vim if the only open window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*
