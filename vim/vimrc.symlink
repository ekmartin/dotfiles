" Map leader to ,
let mapleader = ","
let g:mapleader = ","

syntax on

" Change buffers without saving
set hidden

" Show line numbers
set number

" Show column number
set ruler

" Make backspace work normally
set backspace=2

" Set tabs to 4 spaces
set softtabstop=2
set tabstop=2
set shiftwidth=2
set expandtab

" Fix indenting
filetype indent on
set autoindent

" Display 3 lines around cursor
set scrolloff=3

" Better search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Don't add two spaces when joining lines
set nojoinspaces

set autoread

" Vundle
set nocompatible
filetype off

" fzf
set rtp+=/usr/local/opt/fzf

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
" Plugin 'bling/vim-airline'
" Plugin 'majutsushi/tagbar'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'moll/vim-node'
Plugin 'pangloss/vim-javascript'
Plugin 'scrooloose/nerdtree'
Plugin 'w0rp/ale'
Plugin 'fatih/vim-go'
Plugin 'marijnh/tern_for_vim'
Plugin 'mxw/vim-jsx'
Plugin 'joshdick/onedark.vim'
" Plugin 'lervag/vimtex'
Plugin 'vim-ruby/vim-ruby'
" Plugin 'janko-m/vim-test'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'Raimondi/delimitMate'
Plugin 'airblade/vim-gitgutter'
Plugin 'junegunn/goyo.vim'
Plugin 'fugitive.vim'

Plugin 'Shougo/deoplete.nvim'
Plugin 'roxma/nvim-yarp'
Plugin 'roxma/vim-hug-neovim-rpc'

Plugin 'junegunn/fzf.vim'

call vundle#end()
filetype plugin indent on

set termguicolors
colorscheme onedark

" nnoremap <Leader>] :YcmCompleter GoTo<CR>

" deoplete
let g:deoplete#enable_at_startup = 1
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

let g:deoplete#enable_at_startup = 1

let g:jsx_ext_required = 0

let delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_expand_cr = 1
au FileType rust let b:delimitMate_quotes = "\""

" Ale
let g:ale_python_flake8_args="--ignore=E501,E302"
" let g:ale_linters = {
" \ 'eruby': [],
" \ 'javascript': ['eslint', 'flow'],
" \ 'ruby': ['rubocop', 'ruby'],
" \}

let g:ale_lint_on_text_changed = 'never'
let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   'javascript': ['prettier'],
\}

" For Airline
" set laststatus=2

" NERDTree
let g:NERDTreeMinimalUI = 1

" Keybindings
let g:nerdtree_tabs_open_on_gui_startup = 0
map <C-n> :NERDTreeTabsToggle<CR>
map <D-p> :CtrlPMixed<CR>
nmap Ï€ :CtrlPBuffer<Cr>
nmap <leader>g :Goyo<CR>

function! FlipBindingPry()
  if getline('.') =~? '^\s*binding\.pry\s*$'
    normal dd
  else
    normal obinding.pry
  endif
  write
endfunction
nnoremap <leader>r :call FlipBindingPry()<CR>
nnoremap <leader>t :g/\s*binding.pry$/d \| :w<CR>

" Move in screen lines
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
noremap  <buffer> <silent> 0 g0
noremap  <buffer> <silent> $ g$

" let g:ctrlp_show_hidden = 1
" let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist|flow-typed)|(\.(swp|ico|git|svn|json))$'
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

" Don't travel up to closest .git folder:
let g:ctrlp_working_path_mode = 0
set grepprg=rg\ --color=never
let g:ctrlp_user_command = 'rg %s --ignore-file ~/stripe/.fileignore --files --color=never --glob ""'
let g:ctrlp_use_caching = 0
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': ['<c-t>'],
  \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
\ }

" run tests with vim-test
" nmap <silent> <leader>t :TestNearest<CR>
" nmap <silent> <leader>T :TestFile<CR>
" nmap <silent> <leader>a :TestSuite<CR>
" nmap <silent> <leader>l :TestLast<CR>
" nmap <silent> <leader>g :TestVisit<CR>

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP
" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d


" Remove whitespace highlight from vim-go
let g:go_highlight_trailing_whitespace_error = 0
let g:go_fmt_command = "goimports"

" Remove search highlight
nnoremap <leader><space> :nohlsearch<CR>

if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
autocmd FileType rust,ruby,tex,c,java,javascript,python,go,elixir autocmd BufWritePre * call TrimWhiteSpace()
nnoremap <silent> <leader>ts :call TrimWhiteSpace()<CR>

function! TextFormat()
    set spell spelllang=en_us
    set linebreak
    set wrap
    set textwidth=80
    " set comments+=n:#
endfunction
command! Text call TextFormat()
autocmd BufReadPost,BufNewFile *.md,*.txt,*.tex call TextFormat()

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/target/*,*/dist/*,*.log

let g:ycm_filetype_blacklist = { 'tex': 1, 'plaintex': 1, 'text': 1, 'markdown': 1 }
